buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: "com.moowork.node"
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
        mavenBom 'org.apache.logging.log4j:log4j-bom:2.8.1'
        mavenBom "org.springframework.integration:spring-integration-bom:4.3.6.RELEASE"
    }
}

jar {
	baseName = 'continuum'
	version = '0.0.1-SNAPSHOT'
}

def webProjectDir = "$project.projectDir/build/_webProject"
def webProjectOutputDir = "$project.projectDir/build/_webProject/dist"
def webProjectSvnUrl = 'https://vcs.mc.vanderbilt.edu/health-it/continuum/web/trunk'

import org.vumc.continuum.SvnCheckout

task checkoutWebProject(type: SvnCheckout) {
    svnUrl = webProjectSvnUrl
    projectDir = webProjectDir
}

node {
	download = false
	nodeModulesDir = file(webProjectDir)
}

npmInstall {
	dependsOn checkoutWebProject
}

npm_run_build {
	dependsOn npmInstall
}

war {
	// Download and build ContinuumWeb, removing "http://localhost:8080" from urls
	dependsOn npm_run_build
	from (webProjectOutputDir) {
        exclude("public/**")
		filter{ line -> line
				.replaceAll(/http:\/\/localhost:\d+\//,'/continuum/')
				.replaceAll('src="/','src="/continuum/')
                .replaceAll('href="/','href="/continuum/')
                .replaceAll(/url\(\//,'url(/continuum/')
                .replaceAll(/\/(continuum\/){2,}/,'/continuum/')}
	}
    from (webProjectOutputDir) {
        include("public/**")
    }

    // Spring Boot IDEA plugin doesn't recognize "provided", exclude these jars manually instead
    classpath = classpath.filter {f -> !f.name.toLowerCase().find(/undertow|tomcat|jetty|h2|ojdbc/)}
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
    maven {
        url 'http://maven.jahia.org/maven2/'
    }
}

processResources {
    filesMatching('application-war.properties') {
        expand(project.properties)
    }
}

dependencies {
    // Spring Boot frameworks
    compile('org.springframework.boot:spring-boot-starter-logging') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile('org.springframework.boot:spring-boot-starter-data-rest') {
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
	compile('org.springframework.boot:spring-boot-starter-hateoas'){
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
	compile('org.springframework.boot:spring-boot-starter-websocket'){
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile("org.springframework.boot:spring-boot-starter-security"){
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    compile("org.springframework.boot:spring-boot-starter-integration"){
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }

    compile("org.springframework.integration:spring-integration-jdbc");
    compile("org.springframework.integration:spring-integration-jpa");

    // HL7
    compile 'ca.uhn.hapi:hapi-base:2.2'
    compile 'ca.uhn.hapi:hapi-structures-v22:2.2'
    compile 'ca.uhn.hapi:hapi-structures-v25:2.2'

	// Convenience libraries
	compile("com.google.guava:guava:21.0")
    compile "org.functionaljava:functionaljava:4.6"
	compile "org.functionaljava:functionaljava-java8:4.6"
	compile "org.functionaljava:functionaljava-quickcheck:4.6"
	compile "org.functionaljava:functionaljava-java-core:4.6"

    // Needed to support new Java 8 date types.
    // In JSON...
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6"

    // ...And in Hibernate too.
    runtime "org.hibernate:hibernate-java8:5.0.11.Final"

    // We're not using Joda, but not having it on the classpath causes issues for Spring in WebLogic.
    runtime('joda-time:joda-time:2.9.9')

    compile("com.auth0:java-jwt:3.1.0")

    // Logging Dependencies
    //compile("org.springframework.boot:spring-boot-starter-parent")
    compile("org.slf4j:slf4j-api:1.7.25")
    runtime "org.apache.logging.log4j:log4j-api"
    runtime "org.apache.logging.log4j:log4j-core"
    runtime "org.apache.logging.log4j:log4j-jcl"  //required if you intend to route Spring Boot application.properties logging configuration to a Log4J 2 file appender
    runtime "org.apache.logging.log4j:log4j-slf4j-impl"

    // Dev-only dependencies. These MUST be excluded in the war {} config above.
    runtime('org.springframework.boot:spring-boot-devtools'){
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }
    runtime("com.h2database:h2:1.4.194")
    runtime('com.oracle:ojdbc6:12.1.0.2')

    testCompile('org.springframework.boot:spring-boot-starter-test'){
        exclude module: 'logback-classic'
        exclude module: 'log4j-over-slf4j'
    }

    testCompile 'info.solidsoft.mockito:mockito-java8:2.0.1'
    testCompile 'org.mockito:mockito-core:2.2.5'

}

compileJava.dependsOn(processResources)
