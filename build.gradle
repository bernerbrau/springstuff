buildscript {
	ext {
		springBootVersion = '1.5.1.RELEASE'
	}
	repositories {
		mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.tmatesoft.svnkit:svnkit:1.8.15"
        classpath "com.moowork.gradle:gradle-node-plugin:1.1.1"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: "com.moowork.node"

jar {
	baseName = 'continuum'
	version = '0.0.1-SNAPSHOT'
}

def webProjectDir = "$project.projectDir/build/_webProject"
def webProjectOutputDir = "$project.projectDir/build/_webProject/dist"
def webProjectSvnUrl = 'https://vcs.mc.vanderbilt.edu/health-it/continuum/web/trunk'


import org.tmatesoft.svn.core.internal.wc.*
import org.tmatesoft.svn.core.wc.*
import org.tmatesoft.svn.core.*

task checkoutWebProject {
    def svnUrl = webProjectSvnUrl

    def rev = SVNRevision.HEAD
    def repoUrl
    try {
        repoUrl = SVNURL.parseURIEncoded(svnUrl)
    } catch (SVNException e) {
        throw new InvalidUserDataException("Invalid svnUrl value: $svnUrl", e)
    }

    def dir = file(webProjectDir)
    def performUpdate = false
    if (dir.exists()) {
        if (!dir.isDirectory()) {
            throw new InvalidUserDataException("workspaceDir $dir.absolutePath must be a directory")
        }
        if (dir.list()) {
            performUpdate = true
        }
    }
    try {
        def clientManager = SVNClientManager.newInstance(
                // create a local SVN config dir to make sure we don't reuse existing credentials:
                new DefaultSVNOptions(new File("${System.getProperty("user.home")}/.subversion"), false))

        if (performUpdate) {
            clientManager.updateClient.doUpdate(dir, rev, SVNDepth.INFINITY, false, false)
        } else {
            clientManager.updateClient.doCheckout(repoUrl, dir, SVNRevision.UNDEFINED, rev, SVNDepth.INFINITY, false)
        }
    } catch (SVNException e) {
        throw new InvalidUserDataException((performUpdate ? "svn-update" : "svn-checkout") + " failed for $svnUrl\n" + e.message, e)
    }
}

node {
	download = false
	nodeModulesDir = file(webProjectDir)
}

npm_install {
	dependsOn checkoutWebProject
}

npm_run_build {
	dependsOn npm_install
}

war {
	// Download and build ContinuumWeb, removing "http://localhost:8080" from urls
	dependsOn npm_run_build
	from (webProjectOutputDir) {
		filter{ line -> line
				.replaceAll(/http:\/\/localhost:\d+\//,'/continuum/')
				.replaceAll('src="/',
				'src="/continuum/')
				.replaceAll('href="/',
				'href="/continuum/')
				.replaceAll(/\/(continuum\/){2,}/,
				'/continuum/')}
	}
}

/*
// TODO find a plugin that does this!!
import org.apache.tools.ant.taskdefs.condition.Os

def webProjectDir = './build/_webProject'
def webProjectOutputDir = './build/_webProject/dist'
def webProjectSvnUrl = 'https://vcs.mc.vanderbilt.edu/health-it/continuum/web/trunk'

task buildWebProject {
	exec {
		workingDir '.'
		commandLine 'sh','getWebProject.sh',webProjectSvnUrl,webProjectDir
    }
	exec {
		workingDir webProjectDir
		commandLine 'npm','install'
	}
	exec {
        workingDir webProjectDir
		commandLine 'npm','run','build'
    }
}


*/

// Spring Boot IDEA plugin doesn't recognize "provided", exclude these jars manually instead
war {
    classpath = classpath.filter {f -> !f.name.toLowerCase().find(/undertow|tomcat|jetty|h2/)}
}

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-hateoas') {
        exclude module: 'spring-boot-starter-tomcat'
    }
	compile('org.springframework.boot:spring-boot-starter-integration')
	compile('org.springframework.boot:spring-boot-starter-websocket') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    runtime("com.h2database:h2:1.4.194")

	// Reactive Streams
	compile('io.reactivex:rxjava:1.1.6')

	// Convenience libraries
	compile("com.google.guava:guava:21.0")
    compile "org.functionaljava:functionaljava:4.6"
	compile "org.functionaljava:functionaljava-java8:4.6"
	compile "org.functionaljava:functionaljava-quickcheck:4.6"
	compile "org.functionaljava:functionaljava-java-core:4.6"

	// Needed to support new Java 8 date types in JSON
	compile "com.fasterxml.jackson.module:jackson-module-parameter-names"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8"
	compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6"

    //compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    //compile("org.bitbucket.b_c:jose4j:0.5.0")

    compile('org.springframework.boot:spring-boot-starter-undertow')
    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR5"
	}
}
